*pace.txt*	Measure the pace of typing (in Insert mode &c.)	2023-Dec-30

Author:	Aliaksei Budavei (0x000c70 AT gmail DOT com)
Copyleft ())


See |load-vim-script| and |add-local-help| and |add-plugin|.


==============================================================================
1. Contents						*pace-contents*


	1. Contents....................... |pace-contents|
	2. Dependencies................... |pace-dependencies|
	3. Demo........................... |pace-demo|
	4. Functions & Commands........... |pace-functions| |pace-commands|
	5. Variables...................... |pace-variables|
	6. Caveats........................ |pace-caveats|
	7. History........................ |pace-history|


==============================================================================
2. Dependencies						*pace-dependencies*


	The features enabled: |+autocmd|, |+cmdline_info|, |+eval|,
	|+reltime|, |+statusline|, |+user_commands|, and |+modify_fname|.

	The 'eventignore' option should not include: all, |CursorHoldI|,
	|CursorMovedI|, |InsertEnter|, |InsertChange|, and |InsertLeave|.


==============================================================================
3. Demo							*pace-demo*
							*:PaceDemo*

	Preview this script in mock-action with a touch of rhyming: >

		:echo finddir('demo', &runtimepath, -1)
		:PaceDemo demo/demo.vim
<

==============================================================================
4. Functions & Commands					*pace-functions*
							*pace-commands*

	Source the script and then call a function (or use a command).

					*Pace_Load()* *:PaceOn* *:PaceOff*
	Pace_Load() toggles an instance of either |ruler| or local-to-
		window |statusline| filled with relevant data: >

		:echo Pace_Load(1)
		:PaceOn
<
		Restore global state and clean up: >

		:echo Pace_Load(0)
		:PaceOff
<
					*Pace_Dump()* *:PaceSum* *:PaceDump*
	Pace_Dump() yields the summary of the whole, buffer total, and
		hit instance: >

		:echo join(sort(items(Pace_Dump(1))), "\n")
		:PaceSum
<
		Fetch the copy of the log: >

		:echo Pace_Dump(0)
		:PaceDump
<
		where Pace_Dump(0)[x][y] (:PaceDump x y z)
		[0][0]: [log_hits, all_hits, char, sec] (the whole) ~
		[x][0]: [buf_hits, last_hit, char, sec] (buffer total) ~
		[x][y]: [this_hit, hit_time, char, sec] (hit instance) ~

					*:PaceSaveTo*
		Carry over all data (consider a |VimLeave| event): >

		:vim9cmd echo writefile(['let g:pace_dump = '
					.. string(g:Pace_Dump(0))],
				'path/to/dir/pace_'
					.. localtime())
		:PaceSaveTo path/to/dir
<
		Note: Substitute the real path for the `path/to/dir'.

		In order to merge the new typing session data in the
		old one, source a carryover file before this script,
		e.g. (put in |vimrc|): >

		if isdirectory(expand('path/to/dir'))
			silent! execute 'source '
			\ .split(expand('path/to/dir/pace_*'), "\n")[-1]
		endif
<
		Whenever |:mksession| is used, run |:PaceOff| before it
		to purge local-to-window |g:pace_info| statusline entry.

					*Pace_Free()* *:PaceFree*
	Pace_Free() (:PaceFree) clears out all local to script scope.


==============================================================================
5. Variables						*pace-variables*


					*g:pace_amin*
	g:pace_amin		the pace of all typing a minute.

					*g:pace_info*
	g:pace_info		current "tick, (char/sec), char, sec";
					where `tick' is the time spent
					advancing cursor (continuous),
					otherwise 0.00 (sampling, see
					|g:pace_sample|) (put in |ruler| or
					|statusline|).

					*g:pace_policy*
	g:pace_policy		the sum of any of the following numbers,
					plus 10000, in decimal notation:
		0		mask |CursorMovedI| for all modes below;
		1		poll |Insert-mode|;
		2		poll |Replace-mode|;
		4		poll |Virtual-Replace-mode|;
		10		keep `reject' record (exclusive), i.e.
					any pending collected data that
					have missed an |InsertLeave| event
					and have not been written to
					the log (see about |i_CTRL-C| in
					|pace-caveats|);
		20		keep `reject' record & mark (exclusive);
		100		keep `null' record, i.e. no-characters-
					typed entry (see the inserting
					commands in |pace-caveats|);
		1000		make |g:pace_info| amass all typing
					(exclusive);
		2000		make |g:pace_info| amass buffer typing
					(exclusive).

		The range is 1[012][01][012][0-7] (preset to 10007).
		The variable is timely removed, redefine it to alter
		the current policy (all changes go to |:messages|).

					*g:pace_sample*
	g:pace_sample		the number of milliseconds to pass, before
					another advancement of cursor, for
					another update of |g:pace_info| to
					be permitted.

		In other words, have |g:pace_info| updated whenever pace
		falls behind the set value.  (There is a pending update
		for every |InsertLeave| event for any value; however, see
		about |i_CTRL-C| in |pace-caveats|.)  The sampling values
		range from 50 to 2000 milliseconds, inclusively.  Values
		out of range are subject to normalisation and inference
		as follows: inhibit updating for the values above range,
		adopt the continuous updating for the values below range.
		The variable is timely removed, redefine it to alter
		the current sampling (all changes go to |:messages|).

					*g:pace_dump*
	g:pace_dump		the copy of the log left by |Pace_Free()|.

					*g:pace_pool*
	g:pace_pool		the sorted summary left by |Pace_Free()|.


==============================================================================
6. Caveats						*pace-caveats*


	The script polls the motion of cursor, NOT the use of keystrokes.
	A motion is regarded as a character typed; some special keys
	|ins-special-keys| do not move cursor, others advance it over
	several screen cells atomically, e.g.
		(*) any |digraphs| that require three-to-six key presses
			to produce a character, equate a character;
		(*) typing a word, deleting it |i_CTRL-W|, typing it
			again, equate the doubled word length plus one
			character.

	The |inserting| commands (not `i') may account for a character.
	The last line <EOL> character is never typed, see |eol|.

	Transition from either |ruler| or |statusline| postpones stacking
	|g:pace_info| until one begins typing; so does the initialisation
	call of |Pace_Load()|, since there is nothing yet to be logged.

	The global values of the following options are set:
		(*) 'laststatus' to 1, if 0: to avoid an instance of
			having two rulers set to work, after a vertical
			split;
		(*) 'statusline': to take precedence of 'rulerformat';
		(*) 'updatetime' to the value of |g:pace_sample|, if it is
			defined and within the sampling range: to strive
			to update |g:pace_info|;
		(*) 'winheight' to 1 (in the demo script): to arrange all
			preview windows compactly.

	Leaving |Insert-mode| &c.  by means of the |i_CTRL-C| keystroke
	ignores an |InsertLeave| event.  To force it, and to circumvent
	a contingent `reject' policy |g:pace_policy|, run: >

		:doautocmd pace InsertLeave
<
	The |i_CTRL-O| and |i_<Insert>| keystrokes within |Insert-mode|
	&c.  fire sequentially |InsertLeave| and |InsertEnter| events.
	(The Insert key adopts it arbitrarily.)

	By failing policy, the last `null' and/or `reject' record is
	available between successive |InsertLeave| and |InsertEnter|
	events (viz in |Normal-mode|); by agreeing policy, such record
	shall be automatically entered on the next |InsertEnter| event.


==============================================================================
7. History						*pace-history*

	2023-Dec-30	v3.0.
				demo.vim and pace.vim: ~
				Vim9 classes afford another opportunity as
				a shorter turnaround alternative for access
				to lists.

	2023-Sep-27	v2.0.
				demo.vim and pace.vim: ~
				The files have been overhauled to Vim9
				script.

				The comparison of generated profiling data
				for major script versions shows noticeable
				reduction in execution time for functions
				written in Vim9 syntax, and the improvement
				of measuring accuracy seems promising in
				consequence of this observation.

	2023-Sep-19	v1.3.
				demo.vim and pace.vim: ~
				Links to a repository of the project and
				archives can be found in the file headers.

				Whenever the sub-_second_ unit cannot be
				ascertained so that ticks can be scaled,
				|reltimestr()| is resorted to.

				An in-procedure time lag between an epoch
				and its future referents ceases from being
				a factor.

				The core calculations of the measuring
				algorithm have been further whittled down.

				demo.vim: ~
				Allowance is made for the option value of
				'switchbuf' after the demonstration ends.

				For every header line of a batch to print,
				successive unprinted batches are searched.

				pace.vim: ~
				The precedence of 'statusline' over 'ruler'
				and 'rulerformat' is recognised as support
				warrants for 'laststatus'.

				A sampling alternative to the continuous
				updating of |g:pace_info| is within reach
				with |g:pace_sample| (and patch 7.0.104 for
				Vim).

	2017-May-14	v1.2.
				demo.vim: ~
				The demo buffers allow to re-run a preview.

				pace.vim: ~
				The initial value of |g:pace_info| now
				observes the amassing |g:pace_policy|.

				The sequence of leave-enter mode routines
				is arranged for |InsertChange|.

				|PaceSum| keeps up-to-date its rejects sum.

				The mode check is omitted on |InsertLeave|.

	2016-Dec-26	v1.1.
				pace.txt: ~
				The 'laststatus' option is set to 1, if 0
				(the documentation is made to agree with
				the script).

				pace.vim: ~
				The |g:pace_policy| variable allows a new
				value (2000) to amass buffer typing.

				The script-defined commands are supplied
				with the `-bar' attribute |command-bar|.

	2016-Oct-26	The initial release (v1.0).


==============================================================================

vim:tw=78:ts=8:ft=help
